#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '("str" "split-sequence" "cl-ppcre") :silent t)
  )


(defpackage :ros.script.beer-me.3954356029
  (:use :cl))
(in-package :ros.script.beer-me.3954356029)

(defparameter *environments* nil)
(defparameter *config-dir* (uiop:native-namestring "~/.config/beer-me/"))
(defparameter *env-file* (uiop:native-namestring
                          (concatenate 'string
                                       *config-dir*
                                       ".envlist")))

(defun setup-default-queries ()
  (ensure-directories-exist *config-dir*)
  (unless (probe-file *env-file*)
    (with-open-file (f *env-file* :direction :output
                                  :if-does-not-exist :create)
      (write-sequence "DEFAULT \"psql postgres://postgres:@localhost:5432/postgres -c\"" f))))

(defun get-filter-strs (filter-list &optional acc)
  (let ((whitespacep (ppcre:create-scanner "\s"))
        (first (car filter-list))
        (snd (cadr filter-list)))

    (if (= 0 (length filter-list))
        acc
        (if (ppcre:scan whitespacep first) ; Whitespace indicates an existing filter that should be preserved
            (get-filter-strs (cdr filter-list)
                             (append acc (list first)))

            (get-filter-strs (cddr filter-list)
                             (append acc
                                     (list (format nil "~A = ~A" first snd))))))))

(defun get-filters (filter-list)
  (let ((filter-strs (get-filter-strs filter-list)))
    (if (= 0 (length filter-strs))
        ""
        (format nil "WHERE~{ ~A~^ AND~&     ~}" filter-strs))))

(defun print-usage ()
  (format t "USAGE: beer-me [environment] <resource> [filters]"))

(define-condition missing-template (error)
  ((query-type :initarg :query-type
               :initform nil
               :reader query-type)
   (filename :initarg :filename
             :initform nil
             :reader filename))
  (:report (lambda (condition stream)
             (format stream
                     "Missing template file for ~A: ~A~&"
                     (query-type condition)
                     (filename condition)))))

(defun get-query (query-type)
  (let ((filename (uiop:native-namestring
                   (concatenate 'string
                                *config-dir*
                                query-type
                                ".sql"))))
    (if (probe-file filename)
        (uiop:read-file-string filename)
        (error 'missing-template :query-type query-type :filename filename))))


(defun run-query (env-pair query-type filters)
  (if env-pair                                                        ; if we have a valid environment
      (uiop:run-program                                               ; run the psql command for that environment
       (str:collapse-whitespaces                                      ; removing extraneous whitespace
        (concatenate 'string (cdr env-pair) " \""                     ; passing the query as a string
                     (get-query query-type)                           ; consisting of the query for the resource (with quotes escaped)
                     filters ";\""))                                  ; followed by the statement-ending semicolon
       :output t)
      ;; ELSE
      (format t "[[ QUERY ]]~A~%"      ; simply output the query, without compacting
              (concatenate 'string
                           (get-query query-type)
                           filters
                           ";"))))

(defun get-environments ()
  (loop :for env-pair-string :in (str:lines (str:from-file *env-file*))
        :collect (let ((env-name-pair-list (str:split " " env-pair-string :limit 2)))
                   (cons (read-from-string (car env-name-pair-list))
                         (cadr env-name-pair-list)))))

(defun get-args (argv)
  (let ((env (assoc (read-from-string (car argv)) *environments*)))
    (if env
        (values env (cadr argv) (get-filters (cddr argv)))
        (values nil (car argv) (get-filters (cdr argv))))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (if (= (length argv) 0)
      (print-usage)
      (handler-case (progn
                      (setq *environments* (get-environments))
                      (multiple-value-bind (env-pair query-type filters) (get-args argv)
                        (setup-default-queries)
                        (run-query env-pair query-type filters)))

        (error (c)                      ; if we catch an error
          (format t "~A" c)))))         ; just write it out rather than dropping to debugger


;;; vim: set ft=lisp lisp:
