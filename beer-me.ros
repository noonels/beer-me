#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '() :silent t)
  )


(defpackage :ros.script.beer-me.3954356029
  (:use :cl))
(in-package :ros.script.beer-me.3954356029)

(defparameter default-order-query "
SELECT
    \"order\".*
    order_line_items.*
FROM \"order\" o
JOIN order-financial of ON of.order_id = o.id
JOIN order-line-items oli ON oli.order_id = o.id
")

(defparameter default-product-query "
SELECT
    item.*
    item_batch.*
    batch.*
FROM item
JOIN item_batch ON item.id = item_batch.item_id
JOIN batch ON batch.id = item_batch.batch_id
")

(defparameter default-user-query "
SELECT
    \"user\".*
    organization.*
    organization_user_role.*
    role.*
FROM user
JOIN organization ON \"user\".organization_id = organization.id
JOIN organization_user_role ON organization_user_role.user_id = \"user\".id
JOIN role ON organization_user_role.role_id = role.id
")

(defun setup-default-queries ())

(defun get-filters (filter-pairs)
  (unless (= 0 (length filter-pairs))
    (format nil "WHERE~{ ~A~^ AND~&     ~}"
            (loop :for filter-pair :in filter-pairs
                  :collect (format nil "~A = ~A"
                                   (car filter-pair)
                                   (cdr filter-pair))))))

(defun print-usage ()
  (format t "USAGE: beer-me <environment> <resource> [filters]"))

(defun get-query (query-type)
  default-order-query)

(defun run-query (env query-type filters)
  (cond ((eq env 'query)    (format t "[[ QUERY ]]~%~A~%"
                                    (concatenate 'string
                                                 (get-query query-type)
                                                 filters
                                                 ";")))
        ((eq env 'ny)    (print "ny"))    ; TODO
        ((eq env 'ca)    (print "ca"))    ; TODO
        ((eq env 'local) (print "local")) ; TODO
        (t               (error 'invalid-environment
                                :message (format t "Invalid environment: ~A" env)))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let* ((environment  (read-from-string (car argv)))
         (query-type   (read-from-string (cadr argv)))
         (filters-list (loop :for filter :on (cddr argv) :by #'cddr
                             :collect (cons (car filter) (cadr filter))))
         (filters      (get-filters filters-list)))
    (setup-default-queries)
    (run-query environment query-type filters)))

;;; vim: set ft=lisp lisp:
